{"version":3,"sources":["Example.tsx","examples/Basic/BasicExample.tsx","examples/advanced/AdvancedExample.tsx","App.tsx","examples/Basic/basic-example-text.ts","examples/advanced/advanced-example-text.ts","reportWebVitals.ts","index.tsx"],"names":["Example","text","title","children","useState","currentTab","setCurrentTab","Typography","variant","AppBar","position","color","Tabs","value","onChange","event","i","Tab","label","Box","padding","border","language","useStyles","makeStyles","theme","pivot","palette","primary","main","subheader","paddingTop","spacing","selectionCount","marginLeft","getKey","item","key","items","Array","from","length","map","_","BasicExample","classes","useSelection","onSelect","isSelected","state","selectAll","clearSelection","Container","Paper","paddingLeft","paddingRight","List","disablePadding","ListSubheader","className","ListItemText","component","ListItemSecondaryAction","Button","size","onClick","ListItem","button","selected","e","divider","pivotKey","undefined","maxItemsReducer","action","newState","pivotReducer","selectedItems","didEnforceLimit","AdvancedExample","reducer","removeFromSelection","useSnackbar","enqueueSnackbar","closeSnackbar","useEffect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","anchorOrigin","vertical","horizontal","document","getElementById"],"mappings":"8QAsCeA,EA7ByB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EAC/BC,mBAAiB,GADc,mBAC5DC,EAD4D,KAChDC,EADgD,KAEnE,OACI,gCACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,SACKN,IAEL,cAACO,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,UAAhC,SACI,eAACC,EAAA,EAAD,CAAMC,MAAOR,EAAYS,SAAU,SAACC,EAAOC,GAAR,OAAcV,EAAcU,IAA/D,UACI,cAACC,EAAA,EAAD,CAAKC,MAAM,SACX,cAACD,EAAA,EAAD,CAAKC,MAAM,cAGnB,eAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,OAAO,sBAA3B,UAEuB,IAAfhB,GAAoBF,EAGL,IAAfE,GACI,cAAC,IAAD,CAAmBiB,SAAS,KAA5B,SACKrB,W,yFCtBvBsB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLL,OAAO,aAAD,OAAeI,EAAME,QAAQC,QAAQC,OAE7CC,UAAW,CACTC,WAAYN,EAAMO,QAAQ,IAE5BC,eAAgB,CACdC,WAAYT,EAAMO,QAAQ,QASxBG,EAAS,SAACC,GAAD,OAAgBA,EAAKC,KAC9BC,EAAgBC,MAAMC,KAAK,CAAEC,OAAQ,KAAMC,KAAI,SAACC,EAAG3B,GAAJ,MAAW,CAAEqB,IAAI,OAAD,OAASrB,OA2D/D4B,EA1DM,WACjB,IAAMC,EAAUtB,IADO,EAE4DuB,YAA4CR,EAAO,CACpIH,WADMY,EAFe,EAEfA,SAAUC,EAFK,EAELA,WAAYC,EAFP,EAEOA,MAAOhB,EAFd,EAEcA,eAAgBiB,EAF9B,EAE8BA,UAAWC,EAFzC,EAEyCA,eAGhE,OACA,eAACC,EAAA,EAAD,WACI,cAAC7C,EAAA,EAAD,CAAYC,QAAQ,QAApB,sDAGA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,yFAGA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,yEAGA,cAAC6C,EAAA,EAAD,CAAO7C,QAAQ,WAAf,SACE,cAACW,EAAA,EAAD,CAAKmC,YAAa,EAAGC,aAAc,EAAnC,SACE,eAACC,EAAA,EAAD,CAAMC,gBAAc,EAApB,UACA,eAACC,EAAA,EAAD,CAAeC,UAAWd,EAAQf,UAAlC,UACI,eAAC8B,EAAA,EAAD,WACE,cAACrD,EAAA,EAAD,CAAYsD,UAAU,OAAtB,gCAGA,eAACtD,EAAA,EAAD,CAAYC,QAAQ,QAAQqD,UAAU,OAAOF,UAAWd,EAAQZ,eAAhE,cACIA,EADJ,mBAIF,eAAC6B,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAQvD,QAAQ,WAAWwD,KAAK,QAAQC,QAAS,kBAAMf,KAAvD,iBAGE,cAACa,EAAA,EAAD,CAAQvD,QAAQ,WAAWwD,KAAK,QAAQC,QAAS,kBAAMd,KAAvD,yBAMJb,EAAMI,KAAI,SAAA1B,GAAC,OACT,cAACkD,EAAA,EAAD,CACEC,QAAM,EACNC,SAAUpB,EAAWhC,GAErBiD,QAAS,SAAAI,GAAC,OAAItB,EAAS/B,EAAGqD,IAC1BC,SAAO,EACPX,UAAWV,EAAMsB,WAAavD,EAAEqB,IAAMQ,EAAQnB,WAAQ8C,EANxD,SAQE,cAACZ,EAAA,EAAD,CAAchC,QAASZ,EAAEqB,OALpBrB,EAAEqB,mB,gBC5DnBd,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLL,OAAO,aAAD,OAAeI,EAAME,QAAQC,QAAQC,OAE7CC,UAAW,CACTC,WAAYN,EAAMO,QAAQ,IAE5BC,eAAgB,CACdC,WAAYT,EAAMO,QAAQ,QASxBG,EAAS,SAACC,GAAD,OAAgBA,EAAKC,KAC9BC,EAAgBC,MAAMC,KAAK,CAAEC,OAAQ,KAAMC,KAAI,SAACC,EAAG3B,GAAJ,MAAW,CAAEqB,IAAI,OAAD,OAASrB,OAGxEyD,EAAkB,SAACxB,EAAgCyB,GACvD,IAAMC,EAAWC,YAAa3B,EAAOyB,GAErC,OAAIC,EAASE,cAAcpC,OAJX,EAKP,2BACFQ,GADL,IAEE6B,iBAAiB,IAId,2BACFH,GADL,IAEEG,iBAAiB,KAiFNC,EA3ES,WACpB,IAAMlC,EAAUtB,IADU,EAE6GuB,YAAiCR,EAAO,CAC7KH,SACA6C,QAASP,IAFHvB,EAFkB,EAElBA,UAAW+B,EAFO,EAEPA,oBAAqB9B,EAFd,EAEcA,eAAgBlB,EAF9B,EAE8BA,eAAgBc,EAF9C,EAE8CA,SAAUC,EAFxD,EAEwDA,WAFxD,IAEoEC,MAASsB,EAF7E,EAE6EA,SAAUO,EAFvF,EAEuFA,gBAFvF,EAMiBI,cAAnCC,EANkB,EAMlBA,gBAAiBC,EANC,EAMDA,cAazB,OAXAC,qBAAU,WAQR,OAPIP,GACFK,EAAgB,gCAAkC,CAChD3E,QAAS,QACT6B,IAAK,wBAIF,kBAAM+C,EAAc,0BAC1B,CAACN,EAAiBK,EAAiBC,IAGtC,eAAChC,EAAA,EAAD,WACI,cAAC7C,EAAA,EAAD,CAAYC,QAAQ,QAApB,mDAGA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,yFAGA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,6EAGA,cAAC6C,EAAA,EAAD,CAAO7C,QAAQ,WAAf,SACE,cAACW,EAAA,EAAD,CAAKmC,YAAa,EAAGC,aAAc,EAAnC,SACE,eAACC,EAAA,EAAD,CAAMC,gBAAc,EAApB,UACE,eAACC,EAAA,EAAD,CAAeC,UAAWd,EAAQf,UAAlC,UACE,eAAC8B,EAAA,EAAD,WACE,cAACrD,EAAA,EAAD,CAAYsD,UAAU,OAAtB,gCAGA,eAACtD,EAAA,EAAD,CAAYC,QAAQ,QAAQqD,UAAU,OAAOF,UAAWd,EAAQZ,eAAhE,cACIA,EADJ,IAzDA,EAyDA,mBAIF,eAAC6B,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAQvD,QAAQ,WAAWwD,KAAK,QAAQC,QAAS,kBAAMf,KAAvD,iBAGE,cAACa,EAAA,EAAD,CAAQvD,QAAQ,WAAWwD,KAAK,QAAQC,QAAS,kBAAMd,KAAvD,yBAMJb,EAAMI,KAAI,SAAA1B,GAAC,OACT,eAACkD,EAAA,EAAD,CACEC,QAAM,EACNC,SAAUpB,EAAWhC,GAErBiD,QAAS,SAAAI,GAAC,OAAItB,EAAS/B,EAAGqD,IAC1BC,SAAO,EACPX,UAAWY,IAAavD,EAAEqB,IAAMQ,EAAQnB,WAAQ8C,EANlD,UAQE,cAACZ,EAAA,EAAD,CAAchC,QAASZ,EAAEqB,MACzB,cAACyB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQpD,MAAM,YAAYqD,KAAK,QAAQC,QAAS,kBAAMgB,EAAoBjE,IAA1E,wBAPGA,EAAEqB,mBC5EViD,EAnBH,WAEV,OACE,qBAAK3B,UAAU,MAAf,SACE,eAACP,EAAA,EAAD,WACE,cAAC7C,EAAA,EAAD,CAAYC,QAAQ,KAApB,mCAGA,cAAC,EAAD,CAASP,KChBJ,+iGDgB4BC,MAAM,gBAAvC,SACA,cAAC,EAAD,MAEF,cAAC,EAAD,CAASD,KEnBF,4yIFmB6BC,MAAM,mBAA1C,SACE,cAAC,EAAD,YGNOqF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAkBC,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAA/D,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BhB,K","file":"static/js/main.03d5ad14.chunk.js","sourcesContent":["import { AppBar, Tab, Tabs, Box, Typography } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\n\nexport interface ExampleProps {\n    text: string;\n    title: string;\n}\n\nconst Example: React.FC<ExampleProps> = ({ text, title, children }) => {\n    const [currentTab, setCurrentTab] = useState<number>(0);\n    return (\n        <div>\n            <Typography variant=\"h2\">\n                {title}\n            </Typography>\n            <AppBar position=\"sticky\" color=\"default\">\n                <Tabs value={currentTab} onChange={(event, i) => setCurrentTab(i)}>\n                    <Tab label=\"Demo\" />\n                    <Tab label=\"Code\" />\n                </Tabs>\n            </AppBar>\n            <Box padding=\"50px\" border=\"1px solid lightgrey\">\n                {\n                    currentTab === 0 && children\n                }\n                {\n                    currentTab === 1 && (\n                        <SyntaxHighlighter language=\"ts\">\n                            {text}\n                        </SyntaxHighlighter>\n                    )\n                }\n            </Box>\n        </div>\n    );\n};\n\nexport default Example;","import React from 'react';\nimport useSelection, { PivotReducerState } from \"react-selection-hooks\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Container, Typography, Paper, Box, ListSubheader, makeStyles, Button, ListItemSecondaryAction } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  pivot: {\n    border: `1px solid ${theme.palette.primary.main}`\n  },\n  subheader: {\n    paddingTop: theme.spacing(2)\n  },\n  selectionCount: {\n    marginLeft: theme.spacing(2),\n  },\n}))\n\ninterface Item {\n    key: string;\n}\n\n// for best performance getKey should be wrapped in `useCallback` or declared out of the render body\nconst getKey = (item: Item) => item.key;\nconst items: Item[] = Array.from({ length: 20 }).map((_, i) => ({ key: `Item${i}` }));\nconst BasicExample = () => {\n    const classes = useStyles();\n    const { onSelect, isSelected, state, selectionCount, selectAll, clearSelection } = useSelection<Item, PivotReducerState<Item>>(items, {\n      getKey\n    });\n    return (\n    <Container>\n        <Typography variant=\"body1\">\n          Regular click to selection a single item\n        </Typography>\n        <Typography variant=\"body1\">\n          Shift click to add a range of items to selection using previous pivot point\n        </Typography>\n        <Typography variant=\"body1\">\n          Ctrl click to add/remove an item from the current selection\n        </Typography>\n        <Paper variant=\"outlined\">\n          <Box paddingLeft={2} paddingRight={2}>\n            <List disablePadding>\n            <ListSubheader className={classes.subheader}>\n                <ListItemText>\n                  <Typography component=\"span\">\n                    Select some items!\n                  </Typography>\n                  <Typography variant=\"body2\" component=\"span\" className={classes.selectionCount}>\n                    ({selectionCount} selected)\n                  </Typography>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                <Button variant=\"outlined\" size=\"small\" onClick={() => selectAll()}>\n                    All\n                  </Button>\n                  <Button variant=\"outlined\" size=\"small\" onClick={() => clearSelection()}>\n                    Clear\n                  </Button>\n                </ListItemSecondaryAction>\n              </ListSubheader>\n            {\n              items.map(i => (\n                <ListItem\n                  button\n                  selected={isSelected(i)}\n                  key={i.key}\n                  onClick={e => onSelect(i, e)}\n                  divider\n                  className={state.pivotKey === i.key ? classes.pivot : undefined}\n                >\n                  <ListItemText primary={i.key} />\n                </ListItem>\n              ))\n            }\n            </List>\n          </Box>\n        </Paper>\n      </Container>\n    );\n}\n\nexport default BasicExample;","import React from 'react';\nimport useSelection, { pivotReducer, PivotReducerState, UseSelectionApiReducerActions } from \"react-selection-hooks\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Container, Typography, Paper, Box, ListSubheader, makeStyles, ListItemSecondaryAction, Button } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport { useEffect } from 'react';\nconst useStyles = makeStyles((theme) => ({\n  pivot: {\n    border: `1px solid ${theme.palette.primary.main}`\n  },\n  subheader: {\n    paddingTop: theme.spacing(2)\n  },\n  selectionCount: {\n    marginLeft: theme.spacing(2),\n  }\n}))\n\ninterface Item {\n    key: string;\n}\n\n// for best performance getKey should be wrapped in `useCallback` or declared out of the render body\nconst getKey = (item: Item) => item.key;\nconst items: Item[] = Array.from({ length: 20 }).map((_, i) => ({ key: `Item${i}` }));\n\nconst MAX_ITEMS = 5;\nconst maxItemsReducer = (state: PivotReducerState<Item>, action: UseSelectionApiReducerActions<Item>) => {\n  const newState = pivotReducer(state, action);\n\n  if (newState.selectedItems.length > MAX_ITEMS) {\n    return {\n      ...state,\n      didEnforceLimit: true\n    }\n  }\n\n  return {\n    ...newState,\n    didEnforceLimit: false\n  }\n};\n\ntype ReducerState = PivotReducerState<Item> & { didEnforceLimit: boolean }\n\nconst AdvancedExample = () => {\n    const classes = useStyles();\n    const { selectAll, removeFromSelection, clearSelection, selectionCount, onSelect, isSelected, state: { pivotKey, didEnforceLimit } } = useSelection<Item, ReducerState>(items, {\n      getKey,\n      reducer: maxItemsReducer\n    });\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n    useEffect(() => {\n      if (didEnforceLimit) {\n        enqueueSnackbar('You can\\'t select more than 5!', {\n          variant: 'error',\n          key: 'max-selection-error',\n        })\n      }\n\n      return () => closeSnackbar('max-selection-error');\n    }, [didEnforceLimit, enqueueSnackbar, closeSnackbar]);\n  \n    return (\n    <Container>\n        <Typography variant=\"body1\">\n          Regular click to select a single item\n        </Typography>\n        <Typography variant=\"body1\">\n          Shift click to add a range of items to selection using previous pivot point\n        </Typography>\n        <Typography variant=\"body1\">\n          Ctrl/CMD click to add/remove an item from the current selection\n        </Typography>\n        <Paper variant=\"outlined\">\n          <Box paddingLeft={2} paddingRight={2}>\n            <List disablePadding>\n              <ListSubheader className={classes.subheader}>\n                <ListItemText>\n                  <Typography component=\"span\">\n                    Select some items!\n                  </Typography>\n                  <Typography variant=\"body2\" component=\"span\" className={classes.selectionCount}>\n                    ({selectionCount}/{MAX_ITEMS} selected)\n                  </Typography>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                <Button variant=\"outlined\" size=\"small\" onClick={() => selectAll()}>\n                    All\n                  </Button>\n                  <Button variant=\"outlined\" size=\"small\" onClick={() => clearSelection()}>\n                    Clear\n                  </Button>\n                </ListItemSecondaryAction>\n              </ListSubheader>\n            {\n              items.map(i => (\n                <ListItem\n                  button\n                  selected={isSelected(i)}\n                  key={i.key}\n                  onClick={e => onSelect(i, e)}\n                  divider\n                  className={pivotKey === i.key ? classes.pivot : undefined}\n                >\n                  <ListItemText primary={i.key} />\n                  <ListItemSecondaryAction>\n                    <Button color=\"secondary\" size=\"small\" onClick={() => removeFromSelection(i)}>Remove</Button>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))\n            }\n            </List>\n          </Box>\n        </Paper>\n      </Container>\n    );\n}\n\nexport default AdvancedExample;","import React from 'react';\nimport Example from './Example';\nimport basicExampleText from './examples/Basic/basic-example-text';\nimport advancedExampleText from './examples/advanced/advanced-example-text';\nimport BasicExample from './examples/Basic/BasicExample';\nimport AdvancedExample from './examples/advanced/AdvancedExample';\nimport { Typography, Container } from '@material-ui/core';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Typography variant=\"h1\">\n          react-selection-hooks\n        </Typography>\n        <Example text={basicExampleText} title=\"Basic Example\">\n        <BasicExample />\n      </Example>\n      <Example text={advancedExampleText} title=\"Advanced Example\">\n        <AdvancedExample />\n      </Example>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const example = `\nimport React from 'react';\nimport useSelection, { PivotReducerState } from \"react-selection-hooks\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Container, Typography, Paper, Box, ListSubheader, makeStyles, Button, ListItemSecondaryAction } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  pivot: {\n    border: \\`1px solid \\${theme.palette.primary.main}\\`\n  },\n  subheader: {\n    paddingTop: theme.spacing(2)\n  },\n  selectionCount: {\n    marginLeft: theme.spacing(2),\n  },\n}))\n\ninterface Item {\n    key: string;\n}\n\n// for best performance getKey should be wrapped in \\`useCallback\\` or declared out of the render body\nconst getKey = (item: Item) => item.key;\nconst items: Item[] = Array.from({ length: 20 }).map((_, i) => ({ key: \\`Item\\${i}\\` }));\nconst BasicExample = () => {\n    const classes = useStyles();\n    const { onSelect, isSelected, state, selectionCount, selectAll, clearSelection } = useSelection<Item, PivotReducerState<Item>>(items, {\n      getKey\n    });\n    return (\n    <Container>\n        <Typography variant=\"body1\">\n          Regular click to selection a single item\n        </Typography>\n        <Typography variant=\"body1\">\n          Shift click to add a range of items to selection using previous pivot point\n        </Typography>\n        <Typography variant=\"body1\">\n          Ctrl click to add/remove an item from the current selection\n        </Typography>\n        <Paper variant=\"outlined\">\n          <Box paddingLeft={2} paddingRight={2}>\n            <List disablePadding>\n            <ListSubheader className={classes.subheader}>\n                <ListItemText>\n                  <Typography component=\"span\">\n                    Select some items!\n                  </Typography>\n                  <Typography variant=\"body2\" component=\"span\" className={classes.selectionCount}>\n                    ({selectionCount} selected)\n                  </Typography>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                <Button variant=\"outlined\" size=\"small\" onClick={() => selectAll()}>\n                    All\n                  </Button>\n                  <Button variant=\"outlined\" size=\"small\" onClick={() => clearSelection()}>\n                    Clear\n                  </Button>\n                </ListItemSecondaryAction>\n              </ListSubheader>\n            {\n              items.map(i => (\n                <ListItem\n                  button\n                  selected={isSelected(i)}\n                  key={i.key}\n                  onClick={e => onSelect(i, e)}\n                  divider\n                  className={state.pivotKey === i.key ? classes.pivot : undefined}\n                >\n                  <ListItemText primary={i.key} />\n                </ListItem>\n              ))\n            }\n            </List>\n          </Box>\n        </Paper>\n      </Container>\n    );\n}\n\nexport default BasicExample;\n`\nexport default example;","const example = `\nimport React from 'react';\nimport useSelection, { pivotReducer, PivotReducerState, UseSelectionApiReducerActions } from \"react-selection-hooks\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Container, Typography, Paper, Box, ListSubheader, makeStyles, ListItemSecondaryAction, Button } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport { useEffect } from 'react';\nconst useStyles = makeStyles((theme) => ({\n  pivot: {\n    border: \\`1px solid \\${theme.palette.primary.main}\\`\n  },\n  subheader: {\n    paddingTop: theme.spacing(2)\n  },\n  selectionCount: {\n    marginLeft: theme.spacing(2),\n  }\n}))\n\ninterface Item {\n    key: string;\n}\n\n// for best performance getKey should be wrapped in \\`useCallback\\` or declared out of the render body\nconst getKey = (item: Item) => item.key;\nconst items: Item[] = Array.from({ length: 20 }).map((_, i) => ({ key: \\`Item\\${i}\\` }));\n\nconst MAX_ITEMS = 5;\nconst maxItemsReducer = (state: PivotReducerState<Item>, action: UseSelectionApiReducerActions<Item>) => {\n  const newState = pivotReducer(state, action);\n\n  if (newState.selectedItems.length > MAX_ITEMS) {\n    return {\n      ...state,\n      didEnforceLimit: true\n    }\n  }\n\n  return {\n    ...newState,\n    didEnforceLimit: false\n  }\n};\n\ntype ReducerState = PivotReducerState<Item> & { didEnforceLimit: boolean }\n\nconst AdvancedExample = () => {\n    const classes = useStyles();\n    const { selectAll, removeFromSelection, clearSelection, selectionCount, onSelect, isSelected, state: { pivotKey, didEnforceLimit } } = useSelection<Item, ReducerState>(items, {\n      getKey,\n      reducer: maxItemsReducer\n    });\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n    useEffect(() => {\n      if (didEnforceLimit) {\n        enqueueSnackbar('You can\\\\'t select more than 5!', {\n          variant: 'error',\n          key: 'max-selection-error',\n        })\n      }\n\n      return () => closeSnackbar('max-selection-error');\n    }, [didEnforceLimit, enqueueSnackbar, closeSnackbar]);\n  \n    return (\n    <Container>\n        <Typography variant=\"body1\">\n          Regular click to select a single item\n        </Typography>\n        <Typography variant=\"body1\">\n          Shift click to add a range of items to selection using previous pivot point\n        </Typography>\n        <Typography variant=\"body1\">\n          Ctrl/CMD click to add/remove an item from the current selection\n        </Typography>\n        <Paper variant=\"outlined\">\n          <Box paddingLeft={2} paddingRight={2}>\n            <List disablePadding>\n              <ListSubheader className={classes.subheader}>\n                <ListItemText>\n                  <Typography component=\"span\">\n                    Select some items!\n                  </Typography>\n                  <Typography variant=\"body2\" component=\"span\" className={classes.selectionCount}>\n                    ({selectionCount}/{MAX_ITEMS} selected)\n                  </Typography>\n                </ListItemText>\n                <ListItemSecondaryAction>\n                <Button variant=\"outlined\" size=\"small\" onClick={() => selectAll()}>\n                    All\n                  </Button>\n                  <Button variant=\"outlined\" size=\"small\" onClick={() => clearSelection()}>\n                    Clear\n                  </Button>\n                </ListItemSecondaryAction>\n              </ListSubheader>\n            {\n              items.map(i => (\n                <ListItem\n                  button\n                  selected={isSelected(i)}\n                  key={i.key}\n                  onClick={e => onSelect(i, e)}\n                  divider\n                  className={pivotKey === i.key ? classes.pivot : undefined}\n                >\n                  <ListItemText primary={i.key} />\n                  <ListItemSecondaryAction>\n                    <Button color=\"secondary\" size=\"small\" onClick={() => removeFromSelection(i)}>Remove</Button>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))\n            }\n            </List>\n          </Box>\n        </Paper>\n      </Container>\n    );\n}\n\nexport default AdvancedExample;\n`;\n\nexport default example;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { SnackbarProvider } from 'notistack';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SnackbarProvider anchorOrigin={{ vertical: 'top', horizontal: 'right' }}>\n      <App />\n    </SnackbarProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}