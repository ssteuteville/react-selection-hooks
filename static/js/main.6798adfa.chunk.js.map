{"version":3,"sources":["Example.tsx","examples/Basic/BasicExample.tsx","App.tsx","examples/Basic/basic-example-text.ts","reportWebVitals.ts","index.tsx"],"names":["Example","text","children","useState","currentTab","setCurrentTab","Box","AppBar","position","Tabs","value","onChange","event","i","Tab","label","language","getKey","item","key","items","Array","from","length","map","_","BasicExample","useSelection","onSelect","isSelected","Container","Typography","variant","Paper","paddingLeft","paddingRight","List","disablePadding","ListSubheader","ListItem","button","selected","onClick","e","divider","ListItemText","primary","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAgCeA,EAxByB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EACxBC,mBAAiB,GADO,mBACrDC,EADqD,KACzCC,EADyC,KAE5D,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAAMC,MAAON,EAAYO,SAAU,SAACC,EAAOC,GAAR,OAAcR,EAAcQ,IAA/D,UACI,cAACC,EAAA,EAAD,CAAKC,MAAM,SACX,cAACD,EAAA,EAAD,CAAKC,MAAM,cAIA,IAAfX,GAAoBF,EAGL,IAAfE,GACI,cAAC,IAAD,CAAmBY,SAAS,KAA5B,SACKf,Q,sECdnBgB,EAAS,SAACC,GAAD,OAAgBA,EAAKC,KAC9BC,EAAgBC,MAAMC,KAAK,CAAEC,OAAQ,KAAMC,KAAI,SAACC,EAAGZ,GAAJ,MAAW,CAAEM,IAAI,OAAD,OAASN,OA6C/Da,EA5CM,WAAO,IAAD,EACUC,YAAmBP,EAAO,CACzDH,WADMW,EADe,EACfA,SAAUC,EADK,EACLA,WAGlB,OACA,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,mCAGA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,sDAGA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,yFAGA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,yEAGA,cAACC,EAAA,EAAD,CAAOD,QAAQ,WAAf,SACE,cAAC1B,EAAA,EAAD,CAAK4B,YAAa,EAAGC,aAAc,EAAnC,SACE,eAACC,EAAA,EAAD,CAAMC,gBAAc,EAApB,UACE,cAACC,EAAA,EAAD,iCAIAlB,EAAMI,KAAI,SAAAX,GAAC,OACT,cAAC0B,EAAA,EAAD,CACEC,QAAM,EACNC,SAAUZ,EAAWhB,GAErB6B,QAAS,SAAAC,GAAC,OAAIf,EAASf,EAAG8B,IAC1BC,SAAO,EALT,SAOE,cAACC,EAAA,EAAD,CAAcC,QAASjC,EAAEM,OAJpBN,EAAEM,mBCzBV4B,EAXH,WAEV,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,CAAS/C,KCTD,00DDSR,SACE,cAAC,EAAD,SEIOgD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6798adfa.chunk.js","sourcesContent":["import { AppBar, Tab, Tabs, Box } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\n\nexport interface ExampleProps {\n    text: string;\n}\n\nconst Example: React.FC<ExampleProps> = ({ text, children }) => {\n    const [currentTab, setCurrentTab] = useState<number>(0);\n    return (\n        <Box>\n            <AppBar position=\"sticky\">\n                <Tabs value={currentTab} onChange={(event, i) => setCurrentTab(i)}>\n                    <Tab label=\"Demo\" />\n                    <Tab label=\"Code\" />\n                </Tabs>\n            </AppBar>\n            {\n                currentTab === 0 && children\n            }\n            {\n                currentTab === 1 && (\n                    <SyntaxHighlighter language=\"ts\">\n                        {text}\n                    </SyntaxHighlighter>\n                )\n            }\n        </Box>\n    );\n};\n\nexport default Example;","import React from 'react';\nimport useSelection from \"react-selection-hooks\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Container, Typography, Paper, Box, ListSubheader } from '@material-ui/core';\n\ninterface Item {\n    key: string;\n}\nconst getKey = (item: Item) => item.key;\nconst items: Item[] = Array.from({ length: 20 }).map((_, i) => ({ key: `Item${i}` }));\nconst BasicExample = () => {\n    const { onSelect, isSelected } = useSelection<Item>(items, {\n      getKey\n    });\n    return (\n    <Container>\n        <Typography variant=\"h2\">\n          react-selection-hooks\n        </Typography>\n        <Typography variant=\"body1\">\n          Regular click to selection a single item\n        </Typography>\n        <Typography variant=\"body1\">\n          Shift click to add a range of items to selection using previous pivot point\n        </Typography>\n        <Typography variant=\"body1\">\n          Ctrl click to add/remove an item from the current selection\n        </Typography>\n        <Paper variant=\"outlined\">\n          <Box paddingLeft={2} paddingRight={2}>\n            <List disablePadding>\n              <ListSubheader>\n                Select some items!\n              </ListSubheader>\n            {\n              items.map(i => (\n                <ListItem\n                  button\n                  selected={isSelected(i)}\n                  key={i.key}\n                  onClick={e => onSelect(i, e)}\n                  divider\n                >\n                  <ListItemText primary={i.key} />\n                </ListItem>\n              ))\n            }\n            </List>\n          </Box>\n        </Paper>\n      </Container>\n    );\n}\n\nexport default BasicExample;","import React from 'react';\nimport Example from './Example';\nimport basicExampleText from './examples/Basic/basic-example-text';\nimport BasicExample from './examples/Basic/BasicExample';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <Example text={basicExampleText}>\n        <BasicExample />\n      </Example>\n    </div>\n  );\n}\n\nexport default App;\n","export default `\nimport React from 'react';\nimport useSelection from \"react-selection-hooks\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Container, Typography, Paper, Box, ListSubheader } from '@material-ui/core';\n\ninterface Item {\n    key: string;\n}\nconst getKey = (item: Item) => item.key;\nconst items: Item[] = Array.from({ length: 20 }).map((_, i) => ({ key: \\`Item\\${i}\\` }));\nconst BasicExample = () => {\n    const { onSelect, isSelected } = useSelection<Item>(items, {\n      getKey\n    });\n    return (\n    <Container>\n        <Typography variant=\"h2\">\n          react-selection-hooks\n        </Typography>\n        <Typography variant=\"body1\">\n          Regular click to selection a single item\n        </Typography>\n        <Typography variant=\"body1\">\n          Shift click to add a range of items to selection using previous pivot point\n        </Typography>\n        <Typography variant=\"body1\">\n          Ctrl click to add/remove an item from the current selection\n        </Typography>\n        <Paper variant=\"outlined\">\n          <Box paddingLeft={2} paddingRight={2}>\n            <List disablePadding>\n              <ListSubheader>\n                Select some items!\n              </ListSubheader>\n            {\n              items.map(i => (\n                <ListItem\n                  button\n                  selected={isSelected(i)}\n                  key={i.key}\n                  onClick={e => onSelect(i, e)}\n                  divider\n                >\n                  <ListItemText primary={i.key} />\n                </ListItem>\n              ))\n            }\n            </List>\n          </Box>\n        </Paper>\n      </Container>\n    );\n}\n\nexport default BasicExample;\n`","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}